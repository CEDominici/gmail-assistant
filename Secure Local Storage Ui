<style>
  body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    overflow: hidden;
  }

  #background-video {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    object-fit: cover;
    z-index: -2;
  }

  #video-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    z-index: -1;
  }
</style>

<iframe id="background-video" src="https://www.youtube.com/embed/3i373hjNebE?autoplay=1&mute=1&controls=0&loop=1&playlist=3i373hjNebE&modestbranding=1&showinfo=0" frameborder="0" allow="autoplay; fullscreen" allowfullscreen></iframe>
<div id="video-overlay"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script>
  // Generate basic browser fingerprint
  function getDeviceFingerprint() {
    return CryptoJS.SHA256(
      navigator.userAgent + screen.width + screen.height + Intl.DateTimeFormat().resolvedOptions().timeZone
    ).toString();
  }

  // Derive encryption key using passphrase or fingerprint
  function getEncryptionKey(passphrase) {
    const base = passphrase && passphrase.length > 0 ? passphrase : getDeviceFingerprint();
    return CryptoJS.SHA256(base).toString();
  }

  // Save data to localStorage encrypted
  function saveEncrypted(keyName, data, passphrase) {
    const key = getEncryptionKey(passphrase);
    const ciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), key).toString();
    localStorage.setItem(keyName, ciphertext);
  }

  // Load and decrypt data from localStorage
  function loadDecrypted(keyName, passphrase) {
    const key = getEncryptionKey(passphrase);
    const ciphertext = localStorage.getItem(keyName);
    if (!ciphertext) return null;
    try {
      const bytes = CryptoJS.AES.decrypt(ciphertext, key);
      return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
    } catch (e) {
      console.warn("Failed to decrypt", keyName);
      return null;
    }
  }

  // Clear all stored credentials and reload the page
  function clearAllCredentials() {
    localStorage.clear();
    location.reload();
  }

  // Add a clear credentials button in the UI dynamically
  document.addEventListener("DOMContentLoaded", () => {
    const clearBtn = document.createElement("button");
    clearBtn.innerText = "ðŸ§¼ Clear All Credentials";
    clearBtn.style.margin = "1em auto";
    clearBtn.style.display = "block";
    clearBtn.style.padding = "0.5em 1em";
    clearBtn.style.fontSize = "1em";
    clearBtn.onclick = clearAllCredentials;
    document.body.appendChild(clearBtn);

    // Load stored values and auto-fill fields
    const passphraseInput = document.querySelector("input[type='password']");
    if (passphraseInput) {
      passphraseInput.addEventListener("change", () => {
        const pass = passphraseInput.value;
        const apiKey = loadDecrypted("openai_api_key", pass);
        const creds = loadDecrypted("gmail_credentials", pass);

        const apiInput = document.querySelector("input[placeholder='Paste your OpenAI API Key']");
        if (apiInput && apiKey) apiInput.value = apiKey;

        const fileInput = document.querySelector("input[type='file']");
        if (fileInput && creds) {
          const dataTransfer = new DataTransfer();
          const file = new File([JSON.stringify(creds)], "credentials.json", { type: "application/json" });
          dataTransfer.items.add(file);
          fileInput.files = dataTransfer.files;
          console.log("Gmail credentials decrypted and loaded.");
        }
      });
    }
  });

  // Expose to Streamlit through window
  window.AIEmailSecureStorage = {
    saveEncrypted,
    loadDecrypted,
    clearAllCredentials
  };
</script>
